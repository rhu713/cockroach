# LogicTest: local !metamorphic

# ---------------------------------------------------------
# Ensure Unique Indexes Work With Delete Preserving Encoding
# ---------------------------------------------------------
statement ok
CREATE TABLE ti (
    a INT PRIMARY KEY,
    b INT,
    c INT,
    FAMILY (a, b, c),
    UNIQUE INDEX (b, c) WHERE c > b
);

let $t_id
SELECT id FROM system.namespace WHERE name = 'ti'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true') AS STRING)
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO ti VALUES (1, 1, 100), (2, 2, 1)

#query T kvtrace
#DELETE FROM ti WHERE a = 1
#----
#Scan /Table/53/1/1/0
#Put (delete) /Table/53/2/1/100/0
#Del /Table/53/1/1/0

#query T kvtrace
#INSERT INTO ti VALUES (1, 1, 100)
#----
#CPut /Table/53/1/1/0 -> /TUPLE/2:2:Int/1/1:3:Int/100
#Put /Table/53/2/1/100/0 -> /BYTES/0x0a020389

query T kvtrace
UPDATE ti SET b = 2, c = 200 WHERE a = 1
----
Scan /Table/53/1/1/0
Put /Table/53/1/1/0 -> /TUPLE/2:2:Int/2/1:3:Int/200
Put (delete) /Table/53/2/1/100/0
Put /Table/53/2/2/200/0 -> /BYTES/0x0a020389

# Update a row between not matching the partial index and matching the partial
# index.
statement ok
UPDATE ti SET c = 200 WHERE a = 2

statement ok
UPDATE ti SET c = 1 WHERE a = 2

query T kvtrace
UPDATE ti SET c = 200 WHERE a = 2
----
Scan /Table/53/1/2/0
Put /Table/53/1/2/0 -> /TUPLE/2:2:Int/2/1:3:Int/200
Put /Table/53/2/2/200/0 -> /BYTES/0x0a02038a

# ---------------------------------------------------------
# Inverted Index With Delete Preserving Encoding
# ---------------------------------------------------------

statement ok
CREATE TABLE tii (
  a INT PRIMARY KEY,
  b INT[],
  FAMILY (a,b),
  UNIQUE INVERTED INDEX(b)
)

let $t_id
SELECT id FROM system.namespace WHERE name = 'tii'

let $updated_t_jsonb
WITH
  descs
    AS (
      SELECT
        id,
        crdb_internal.pb_to_json(
          'cockroach.sql.sqlbase.Descriptor',
          descriptor
        )
          AS descriptor
      FROM
        system.descriptor
    )
SELECT
  CAST (
    json_set(
      json_set(descriptor, ARRAY['table', 'indexes', '0', 'useDeletePreservingEncoding'], 'true'),
      ARRAY['table', 'modificationTime'], json_build_object('wallTime', cluster_logical_timestamp()::INT8::STRING)
    ) AS STRING
  )
FROM
  descs WHERE id = $t_id;

statement ok
SELECT * FROM crdb_internal.unsafe_upsert_descriptor($t_id, crdb_internal.json_to_pb('cockroach.sql.sqlbase.Descriptor',$$ $updated_t_jsonb $$), true)

statement ok
INSERT INTO tii VALUES (1, ARRAY[1, 2, 3, 2, 2, NULL, 3])

# Update a row that has 1 new entry and 1 removed entry in the index.
query T kvtrace
UPDATE tii SET b = ARRAY[1, 2, 2, NULL, 4, 4]
----
Scan /Table/57/{1-2}
Put /Table/57/1/1/0 -> /TUPLE/
Put (delete) /Table/57/2/3/1/0
Put /Table/57/2/4/1/0 -> /BYTES/0x0a0103
